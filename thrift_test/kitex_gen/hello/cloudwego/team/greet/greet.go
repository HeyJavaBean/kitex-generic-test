// Code generated by Kitex v0.8.0. DO NOT EDIT.

package greet

import (
	"context"
	team "generic-kitex-test/thrift_test/kitex_gen/hello/cloudwego/team"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return greetServiceInfo
}

var greetServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "greet"
	handlerType := (*team.Greet)(nil)
	methods := map[string]kitex.MethodInfo{
		"Hello": kitex.NewMethodInfo(helloHandler, newGreetHelloArgs, newGreetHelloResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "team",
		"ServiceFilePath": `example.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func helloHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*team.GreetHelloArgs)
	realResult := result.(*team.GreetHelloResult)
	success, err := handler.(team.Greet).Hello(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGreetHelloArgs() interface{} {
	return team.NewGreetHelloArgs()
}

func newGreetHelloResult() interface{} {
	return team.NewGreetHelloResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Hello(ctx context.Context, req *team.MyReq) (r *team.MyResp, err error) {
	var _args team.GreetHelloArgs
	_args.Req = req
	var _result team.GreetHelloResult
	if err = p.c.Call(ctx, "Hello", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
